***********************************************************************************
LA2 CODES
***********************************************************************************

---
output:
  html_document: default
  pdf_document: default
---
# **EDA LA1**
## R Ritesh ( 1NT21IS121 )

**Installing Package**
```{r}
# Set a CRAN mirror
options(repos = c(CRAN = "https://cran.rstudio.com"))
```
**Install and load necessary packages**
```{r}
install.packages("reshape2")
install.packages(c("readr", "ggplot2", "dplyr"))
install.packages("plotly")

library(readr)
library(ggplot2)
library(dplyr)
library(reshape2)
library(plotly)


```
**Import data (replace 'your_data.csv' with the actual file path)**
```{r}
b <- read.csv("E:/archive/googleplaystore_user_reviews.csv")
```
**Explore the structure of your data**
```{r}

str(b)

ggplot(b, aes(x = Sentiment)) +
  geom_bar(fill = "skyblue", color = "black", alpha = 0.7) +
  labs(title = "Sentiment Distribution",
       x = "Sentiment",
       y = "Count") +
  theme_minimal()

```

**Ploting graphs**
```{r}
ggplot(b, aes(x = Sentiment_Polarity, y = Sentiment_Subjectivity, color = Sentiment)) +
  geom_point() +
  labs(title = "Sentiment Polarity vs Sentimen Subjectivity",
       x = "Sentiment Polarity",
       y = "Sentiment Subjectivity",
       color = "Sentiment")

# Histogram of Sentiment Polarity
ggplot(b, aes(x = Sentiment_Polarity, fill = Sentiment)) +
  geom_histogram(binwidth = 0.1, position = "dodge", alpha = 0.7) +
  labs(title = "Histogram of Sentiment Polarity",
       x = "Sentiment Polarity",
       y = "Count") +
  theme_minimal()


# Line Plot of Sentiment Polarity
ggplot(b, aes(x = seq_along(Sentiment), y = Sentiment_Polarity)) +
  geom_line() +
  labs(title = "Line Plot of Sentiment Polarity",
       x = "Index",
       y = "Sentiment Polarity") +
  theme_minimal()



# Box Plot of Sentiment Polarity
ggplot(b, aes(x = 1, y = Sentiment_Polarity, fill = Sentiment)) +
  geom_boxplot(alpha = 0.7) +
  labs(title = "Box Plot of Sentiment Polarity",
       x = "",
       y = "Sentiment Polarity") +
  theme_minimal()



# Density Plot of Sentiment Polarity
ggplot(b, aes(x = Sentiment_Polarity, fill = Sentiment)) +
  geom_density(alpha = 0.7) +
  labs(title = "Density Plot of Sentiment Polarity",
       x = "Sentiment Polarity",
       y = "Density",
       fill = "Sentiment") +
  theme_minimal()




# Histogram with Density Curve of Sentiment Polarity
ggplot(b, aes(x = Sentiment_Polarity, fill = Sentiment)) +
  geom_histogram(binwidth = 0.1, position = "dodge", alpha = 0.7) +
  geom_density(aes(y = ..count..), alpha = 0.5, color = "red") +
  labs(title = "Histogram with Density Curve of Sentiment Polarity",
       x = "Sentiment Polarity",
       y = "Count") +
  theme_minimal()



# Create a density plot for each group of Sentiment
ggplot(b, aes(x = Sentiment_Polarity, fill = Sentiment)) +
  geom_density(alpha = 0.7) +
  labs(title = "Density Plots of Sentiment Polarity by Group",
       x = "Sentiment Polarity",
       y = "Density") +
  theme_minimal() +
  facet_wrap(~Sentiment, scales = "free_y")



# Create a frequency polygon for Sentiment_Polarity
ggplot(b, aes(x = Sentiment_Polarity)) +
  geom_freqpoly(binwidth = 0.1, color = "blue", fill = "skyblue", alpha = 0.7) +
  labs(title = "Frequency Polygon of Sentiment Polarity",
       x = "Sentiment Polarity",
       y = "Frequency") +
  theme_minimal()



# Create a box plot with notches for Sentiment Polarity
ggplot(b, aes(x = Sentiment, y = Sentiment_Polarity, fill = Sentiment)) +
  geom_boxplot(notch = TRUE, alpha = 0.7) +
  labs(title = "Box Plot with Notches for Sentiment Polarity",
       x = "Sentiment",
       y = "Sentiment Polarity") +
  theme_minimal()



# Create multiple dot plots for Sentiment Polarity grouped by Sentiment
ggplot(b, aes(x = Sentiment, y = Sentiment_Polarity, fill = Sentiment)) +
  geom_dotplot(binaxis = 'y', stackdir = 'center', position = 'dodge', dotsize = 0.5, alpha = 0.7) +
  labs(title = "Multiple Dot Plots for Sentiment Polarity",
       x = "Sentiment",
       y = "Sentiment Polarity") +
  theme_minimal()



# Create a density plot of Sentiment Polarity and Sentiment Subjectivity
ggplot(b, aes(x = Sentiment_Polarity, y = Sentiment_Subjectivity)) +
  geom_density_2d(fill = "skyblue", color = "black", alpha = 0.7) +
  labs(title = "Density Plot of Sentiment Polarity and Subjectivity",
       x = "Sentiment Polarity",
       y = "Sentiment Subjectivity") +
  theme_minimal()




# Create histograms with new facet labels
ggplot(b, aes(x = Sentiment_Polarity, fill = Sentiment)) +
  geom_histogram(binwidth = 0.1, position = "dodge", alpha = 0.7) +
  labs(title = "Histograms of Sentiment Polarity",
       x = "Sentiment Polarity",
       y = "Count") +
  theme_minimal() +
  facet_grid(Sentiment ~ ., scales = "free_y", labeller = as_labeller(c(Positive = "Positive", Neutral = "Neutral", Negative = "Negative")))




# Create a Violin Plot
ggplot(b, aes(x = Sentiment, y = Sentiment_Polarity, fill = Sentiment)) +
  geom_violin(trim = FALSE, alpha = 0.7) +
  labs(title = "Violin Plot of Sentiment Polarity",
       x = "Sentiment",
       y = "Sentiment Polarity") +
  theme_minimal()



# Calculate the correlation matrix
cor_matrix <- cor(select(b, Sentiment_Polarity, Sentiment_Subjectivity))

# Convert the correlation matrix to a long format
cor_long <- reshape2::melt(cor_matrix)

# Create a correlation heatmap
ggplot(data = cor_long, aes(x = Var1, y = Var2, fill = value)) +
  geom_tile(color = "white") +
  scale_fill_gradient(low = "red", high = "green") +
  labs(title = "Correlation Matrix",
       x = "Variables",
       y = "Variables") +
  theme_minimal()
  


# Create a 3D scatter plot
plot_ly(b, x = ~Sentiment_Polarity, y = ~Sentiment_Subjectivity, z = ~Sentiment, color = ~Sentiment, type = "scatter3d", mode = "markers") %>%
  layout(scene = list(xaxis = list(title = "Sentiment Polarity"),
                      yaxis = list(title = "Sentiment Subjectivity"),
                      zaxis = list(title = "Sentiment")))

           


             
```


